import React, { useRef } from 'react';
import { motion } from 'framer-motion';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import { useCalculator } from '../../contexts/CalculatorContext';

const PDFExport: React.FC<{ containerRef: React.RefObject<HTMLDivElement> }> = ({ containerRef }) => {
  const { airline, position, results } = useCalculator();
  
  const airlineName = airline === 'yellow' ? 'Yellow Tail' : 'Blue Tail';
  const positionName = position === 'captain' ? 'Captain' : 'First Officer';
  
  const exportToPDF = async () => {
    if (!containerRef.current || !results) return;
    
    // Create loading indicator
    const loadingToast = document.createElement('div');
    loadingToast.className = 'fixed top-4 right-4 bg-blue-600 text-white px-4 py-2 rounded shadow-lg z-50';
    loadingToast.textContent = 'Generating PDF...';
    document.body.appendChild(loadingToast);
    
    try {
      // Wait a moment to ensure loading indicator is visible
      await new Promise(resolve => setTimeout(resolve, 100));
      
      const content = containerRef.current;
      const canvas = await html2canvas(content, {
        scale: 2,
        logging: false,
        useCORS: true,
        backgroundColor: document.documentElement.classList.contains('dark') ? '#1f2937' : '#ffffff',
      });
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
      });
      
      // Calculate aspect ratio to fit image to page
      const imgWidth = 210; // A4 width in mm
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      // Add title
      pdf.setFontSize(18);
      pdf.text(`${airlineName} Salary Report - ${positionName}`, 105, 15, { align: 'center' });
      
      // Add date
      pdf.setFontSize(12);
      pdf.text(`Generated on ${new Date().toLocaleDateString()}`, 105, 22, { align: 'center' });
      
      // Add the image
      pdf.addImage(imgData, 'PNG', 0, 30, imgWidth, imgHeight);
      
      // Add footer
      pdf.setFontSize(10);
      pdf.text('Generated by PilotPro Salary Calculator', 105, 285, { align: 'center' });
      
      // Save the PDF
      pdf.save(`${airlineName.replace(' ', '_')}_${positionName}_Salary_Report.pdf`);
      
      // Success toast
      loadingToast.textContent = 'PDF exported successfully!';
      loadingToast.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded shadow-lg z-50';
      
      // Remove toast after 3 seconds
      setTimeout(() => {
        document.body.removeChild(loadingToast);
      }, 3000);
    } catch (error) {
      console.error('Error generating PDF:', error);
      
      // Error toast
      loadingToast.textContent = 'Error generating PDF!';
      loadingToast.className = 'fixed top-4 right-4 bg-red-600 text-white px-4 py-2 rounded shadow-lg z-50';
      
      // Remove toast after 3 seconds
      setTimeout(() => {
        document.body.removeChild(loadingToast);
      }, 3000);
    }
  };
  
  return (
    <motion.button
      onClick={exportToPDF}
      className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
      whileHover={{ scale: 1.03 }}
      whileTap={{ scale: 0.97 }}
      disabled={!results}
    >
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fillRule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z" clipRule="evenodd" />
      </svg>
      Export as PDF
    </motion.button>
  );
};

export default PDFExport;
